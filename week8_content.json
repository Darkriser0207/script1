[
  {
    "question": "Write a program to implement hybrid inheritance for managing employee information.",
    "explanation": "--NA--",
    "answer": "// You are using Java\nclass Employee {\n    String name;\n    int id;\n    public Employee(String name, int id) {\n        this.name = name;\n        this.id = id;\n    }\n    public void display() {\n        System.out.println(\"Name: \" + name);\n        System.out.println(\"ID: \" + id);\n    }\n}\nclass Manager extends Employee {\n    int salary;\n    public Manager(String name, int id, int salary) {\n        super(name, id);\n        this.salary = salary;\n    }\n    public void display() {\n        System.out.println(\"Employee Type: Manager\");\n        super.display();\n        System.out.println(\"Salary: \" + salary);\n    }\n}\nclass Engineer extends Employee {\n    int salary;\n    public Engineer(String name, int id, int salary) {\n        super(name, id);\n        this.salary = salary;\n    }\n    public void display() {\n        System.out.println(\"Employee Type: Engineer\");\n        super.display();\n        System.out.println(\"Salary: \" + salary);\n    }\n}"
  },
  {
    "question": "Create a program that demonstrates hierarchical inheritance using three classes: Animal, Bird, and Mammal.",
    "explanation": "--NA--",
    "answer": "// You are using Java\nclass Animal {\n    public void eat() {\n    }\n}\nclass Bird extends Animal {\n    public void fly() {\n        System.out.println(\"Bird is flying.\");\n    }\n    public void eat() {\n        System.out.println(\"Bird is eating worms.\");\n    }\n}\nclass Mammal extends Animal {\n    public void run() {\n        System.out.println(\"Mammal is running.\");\n    }\n    public void eat() {\n        System.out.println(\"Mammal is eating grass.\");\n    }\n}"
  },
  {
    "question": "Overriding is another concept that every application developer should know. Overriding is a runtime polymorphism. The inherited class has the overridden method, which has the same name as the method in the parent class. The argument number, types, or return types should not differ in any case. The method is invoked with the object of the specific class (but with the reference of the parent class).",
    "explanation": "--NA--",
    "answer": "// You are using Java\nimport java.util.Scanner;\nclass Event {\n    protected String name;\n    protected String detail;\n    protected String ownerName;\n    public Event(String name, String detail, String ownerName) {\n        this.name = name;\n        this.detail = detail;\n        this.ownerName = ownerName;\n    }\n    public double projectedRevenue() {\n        return 0.0;\n    }\n}\nclass Exhibition extends Event {\n    int noOfStall;\n    public Exhibition(String name, String detail, String ownerName, int noOfStall) {\n        super(name, detail, ownerName);\n        this.noOfStall = noOfStall;\n    }\n    public double projectedRevenue() {\n        return noOfStall * 10000;\n    }\n}\nclass StageEvent extends Event {\n    int noOfShows;\n    int noOfSeatsPerShow;\n    public StageEvent(String name, String detail, String ownerName, int noOfShows, int noOfSeatsPerShow) {\n        super(name, detail, ownerName);\n        this.noOfShows = noOfShows;\n        this.noOfSeatsPerShow = noOfSeatsPerShow;\n    }\n    public double projectedRevenue() {\n        return noOfShows * noOfSeatsPerShow * 50;\n    }\n}\nclass Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String name = sc.nextLine();\n        String detail = sc.nextLine();\n        String ownerName = sc.nextLine();\n        int choice = sc.nextInt();\n        if (choice == 1) {\n            int noOfStall = sc.nextInt();\n            Event e = new Exhibition(name, detail, ownerName, noOfStall);\n            System.out.println(e.projectedRevenue());\n        } else if (choice == 2) {\n            int noOfShows = sc.nextInt();\n            int noOfSeatsPerShow = sc.nextInt();\n            Event se = new StageEvent(name, detail, ownerName, noOfShows, noOfSeatsPerShow);\n            System.out.println(se.projectedRevenue());\n        }\n    }\n}"
  },
  {
    "question": "A company maintains a database that has the details of all the employees. There are two levels of employees where level 1 is the top management having a salary of more than 100 dollars and level 2 is the staff who are getting a salary of fewer than 100 dollars. Create a class named Employee with empId and salary as attributes. Create another class empLevel that extends employee and categorizes the employee into various levels.",
    "explanation": "--NA--",
    "answer": "// You are using Java\nimport java.util.Scanner;\nclass Employee {\n    int empId;\n    float salary;\n    public Employee(int empId, float salary) {\n        this.empId = empId;\n        this.salary = salary;\n    }\n}\nclass empLevel extends Employee {\n    public empLevel(int empId, float salary) {\n        super(empId, salary);\n    }\n    public void display() {\n        System.out.println(empId);\n        System.out.println(salary);\n        if (salary >= 100) {\n            System.out.println(1);\n        } else {\n            System.out.println(2);\n        }\n    }\n}\nclass Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int empId = sc.nextInt();\n        float salary = sc.nextFloat();\n        empLevel el = new empLevel(empId, salary);\n        el.display();\n    }\n}"
  },
  {
    "question": "Ajay, an airline manager, needs to manage and display the details of aircrafts in his fleet. He has a base class Aircraft and two subclasses: PublicAircraft and PrivateAircraft. The subclasses extend the functionality of the base class by adding specific attributes for each type of aircraft.",
    "explanation": "--NA--",
    "answer": "// You are using Java\nimport java.util.Scanner;\nclass Aircraft {\n    String aircraftName;\n    String source;\n    String destination;\n    public Aircraft(String aircraftName, String source, String destination) {\n        this.aircraftName = aircraftName;\n        this.source = source;\n        this.destination = destination;\n    }\n    public void display() {\n        System.out.println(\"Aircraft Name : \" + aircraftName);\n        System.out.println(\"Source : \" + source);\n        System.out.println(\"Destination : \" + destination);\n    }\n}\nclass PublicAircraft extends Aircraft {\n    int noOfKgsallowed;\n    float addFeeperKg;\n    public PublicAircraft(String aircraftName, String source, String destination, int noOfKgsallowed, float addFeeperKg) {\n        super(aircraftName, source, destination);\n        this.noOfKgsallowed = noOfKgsallowed;\n        this.addFeeperKg = addFeeperKg;\n    }\n    public void display() {\n        System.out.println(\"Aircraft Type : Public Aircraft\");\n        super.display();\n        System.out.println(\"Check in before two hours : Yes\");\n        System.out.println(\"Number of kgs allowed per person : \" + noOfKgsallowed);\n        System.out.println(\"Additional fee charged for extra baggage per Kg : \" + addFeeperKg);\n    }\n}\nclass PrivateAirCraft extends Aircraft {\n    String pilotPrefer;\n    String purpose;\n    public PrivateAirCraft(String aircraftName, String source, String destination, String pilotPrefer, String purpose) {\n        super(aircraftName, source, destination);\n        this.pilotPrefer = pilotPrefer;\n        this.purpose = purpose;\n    }\n    public void display() {\n        System.out.println(\"Aircraft Type : Private Aircraft\");\n        super.display();\n        System.out.println(\"Check in before two hours : No\");\n        System.out.println(\"Pilot Name : \" + pilotPrefer);\n        System.out.println(\"Purpose : \" + purpose);\n    }\n}\nclass Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        String aircraftName = sc.nextLine();\n        String source = sc.nextLine();\n        String destination = sc.nextLine();\n        int flightType = Integer.parseInt(sc.nextLine());\n        if (flightType == 1) {\n            int noOfKgsallowed = Integer.parseInt(sc.nextLine());\n            float addFeeperKg = Float.parseFloat(sc.nextLine());\n            PublicAircraft pub = new PublicAircraft(aircraftName, source, destination, noOfKgsallowed, addFeeperKg);\n            pub.display();\n        } else if (flightType == 2) {\n            String pilotPrefer = sc.nextLine();\n            String purpose = sc.nextLine();\n            PrivateAirCraft priv = new PrivateAirCraft(aircraftName, source, destination, pilotPrefer, purpose);\n            priv.display();\n        }\n    }\n}"
  },
  {
    "question": "Write a Java program to create a class Shape representing geometric shapes. Implement the following functionalities:",
    "explanation": "--NA--",
    "answer": "// You are using Java\nimport java.util.Scanner;\nclass Shape {\n    String type;\n    public Shape(String type) {\n        this.type = type;\n    }\n    public void Area() {\n        // To be overridden\n    }\n}\nclass Rectangle extends Shape {\n    int length, width;\n    public Rectangle(int length, int width) {\n        super(\"Rectangle\");\n        this.length = length;\n        this.width = width;\n        System.out.println(\"Creating a rectangle with length \" + length + \" and width \" + width + \".\");\n    }\n    public void Area() {\n        System.out.printf(\"Area of rectangle: %.2f\\n\", (float) length * width);\n    }\n}\nclass Circle extends Shape {\n    int radius;\n    public Circle(int radius) {\n        super(\"Circle\");\n        this.radius = radius;\n        System.out.println(\"Creating a circle with radius \" + radius + \".\");\n    }\n    public void Area() {\n        System.out.printf(\"Area of circle: %.2f\\n\", (Math.PI * radius * radius));\n    }\n}\nclass Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        int length = sc.nextInt();\n        int width = sc.nextInt();\n        int radius = sc.nextInt();\n        Shape r = new Rectangle(length, width);\n        Shape c = new Circle(radius);\n        r.Area();\n        c.Area();\n    }\n}"
  }
]
