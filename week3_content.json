[
  {
    "question": "Maya is working on a text analysis project and needs to determine the length of any string input by the user. Write a program to take a string as input and print its length.",
    "explanation": "--NA--",
    "answer": "public static void main(String[] args) {\n    Scanner scanner = new Scanner(System.in);\n\n    String inputString = scanner.nextLine();\n\n    int length = inputString.length();\n    System.out.println(length);\n\n    scanner.close();\n}"
  },
  {
    "question": "Meet Jancy, a diligent student learning to master programming. She is working on a project that requires her to process text data. Today, she needs to convert a given string to lowercase to ensure consistent and uniform text.",
    "explanation": "--NA--",
    "answer": "// You are using Java\n    public static void main(String[] args) {\n        //Type your code here\n        Scanner sc=new Scanner(System.in);\n        String text=sc.nextLine();\n        System.out.println(text.toLowerCase());\n        sc.close();\n    }"
  },
  {
    "question": "Chetan needs to analyze different strings to determine the count of vowels and check if vowels are present.",
    "explanation": "--NA--",
    "answer": "import java.util.Scanner;\n\nclass Main {\n\n    // Function to count vowels in a string and check if vowels are present\n    public static void countAndCheckVowels(String str) {\n        int vowelCount = 0;\n        boolean vowelsPresent = false;\n        // Convert the string to lowercase to handle both lowercase and uppercase vowels\n        str = str.toLowerCase();\n\n        for (int i = 0; i < str.length(); i++) {\n            char ch = str.charAt(i);\n            if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') {\n                vowelCount++;\n                vowelsPresent = true;\n            }\n        }\n\n        System.out.println(\"Number of vowels: \" + vowelCount);\n        if (vowelsPresent) {\n            System.out.println(\"Vowels are present.\");\n        } else {\n            System.out.println(\"Vowels are not present.\");\n        }\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        String input = scanner.nextLine().trim();\n        scanner.close();\n\n        countAndCheckVowels(input);\n    }\n}"
  },
  {
    "question": "Sarah is organizing a letter-counting game for her friends. She has a string of letters and wants to identify the first letter that appears more than once. She needs the result to determine the winner of her game.",
    "explanation": "--NA--",
    "answer": "import java.util.Scanner;\nclass Main\n{\n    public static void main(String[] args)\n    {\n        Scanner sc=new Scanner(System.in);\n        String S=sc.nextLine();\n        for(int i=1;i<S.length();i++)\n        {\n            for(int j=0;j<i;j++)\n            {\n                if(S.charAt(i)==S.charAt(j))\n                {\n                    System.out.println(S.charAt(i));\n                    return;\n                }\n            }\n        }\n    }\n}"
  },
  {
    "question": "Robin is fascinated by ancient Roman numerals and wants to create a program to convert decimal numbers to Roman numerals. He needs your help to complete the program.",
    "explanation": "--NA--",
    "answer": "// You are using Java\nimport java.util.Scanner;\nclass Main\n{\n    public static String intToRoman(int num)\n    {\n        String[] romanSymbols={\"M\",\"CM\",\"D\",\"CD\",\"C\",\"XC\",\"L\",\"XL\",\"X\",\"IX\",\"V\",\"IV\",\"I\"};\n        int[] values={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n        StringBuilder roman=new StringBuilder();\n        for(int i=0;i<values.length;i++)\n        {\n            while(num>=values[i])\n            {\n                roman.append(romanSymbols[i]);\n                num-=values[i];\n            }\n        }\n        return roman.toString();\n    }\n    public static void main(String[] args){\n        Scanner sc=new Scanner(System.in);\n        int num=sc.nextInt();\n        System.out.println(intToRoman(num));\n        sc.close();\n    }\n}"
  },
  {
    "question": "Consider a scenario where you are tasked with organizing the different possible subsequences of a word into sorted order. You are given a string, and your goal is to find and display all the contiguous subsequences (subarrays) of that string.",
    "explanation": "--NA--",
    "answer": "import java.util.Scanner;\nclass Main\n{\n    public static void main(String[] args)\n    {\n        Scanner sc=new Scanner(System.in);\n        String s=sc.nextLine().toLowerCase();\n        sc.close();\n        int n=s.length();\n        int totalSubstrings=(n*(n+1))/2;\n        String[] substrings=new String[totalSubstrings];\n        int index=0;\n        for(int i=0;i<n;i++)\n        {\n            for(int j=i+1;j<=n;j++)\n            {\n                substrings[index++]=s.substring(i,j);\n            }\n        }\n        for(int i =0; i<totalSubstrings-1;i++)\n        {\n            for(int j=i+1;j<totalSubstrings;j++)\n            {\n                if(substrings[i].compareTo(substrings[j])>0)\n                {\n                    String temp=substrings[i];\n                    substrings[i]=substrings[j];\n                    substrings[j]=temp;\n                }\n            }\n        }\n        for(String sub:substrings)\n        {\n            System.out.println(sub);\n        }\n    }\n}"
  },
  {
    "question": "Kunal is developing a software tool that requires him to efficiently determine the length of the longest substring without repeating characters from a given string. This capability is crucial for optimizing search functionality within large text data. The program reads a string and calculates the length of the longest substring that contains unique characters.",
    "explanation": "--NA--",
    "answer": "import java.util.*;\nclass LongestUniqueSubstring\n{\n    public static int lengthOfLongestSubstring(String s)\n    {\n        int[] charIndex=new int[256];\n        Arrays.fill(charIndex,-1);\n        int left=0,maxLength=0;\n        for(int right=0;right<s.length();right++)\n        {\n            if(charIndex[s.charAt(right)]>=left)\n            {\n                left=charIndex[s.charAt(right)]+1;\n            }\n            charIndex[s.charAt(right)]=right;\n            maxLength=Math.max(maxLength,right-left+1);\n        }\n        return maxLength;\n    }\n    public static void main(String[] args)\n    {\n        Scanner sc=new Scanner(System.in);\n        String input=sc.nextLine().trim();\n        System.out.println(lengthOfLongestSubstring(input));\n        sc.close();\n    }\n}"
  }
]
